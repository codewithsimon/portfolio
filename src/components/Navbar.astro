---
const navItems = [
  { name: 'About', url: '/about' },
  { name: 'Events', url: '/events' },
  { name: 'Projects', url: '/projects' },
  { name: 'Gallery', url: '/gallery' },
  { name: 'Testimonials', url: '/testimonials' },
  { name: 'Blog', url: '/blog' },
  { name: 'Media Kit', url: '/media-kit' },
  { name: 'Videos', url: '/videos' },
  { name: 'Contact', url: '/contact' }
];
---

<header class="fixed w-full z-50 transition-all duration-300" id="header">
  <nav class="container mx-auto px-4 lg:px-8">
    <div class="flex items-center justify-between h-24">
      <!-- Logo -->
      <a 
        href="/" 
        class="text-2xl font-playfair font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-primary-400"
      >
        Stephen Simon
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-4">
        {navItems.map(item => (
          <a 
            href={item.url}
            class="relative px-2 py-2 text-sm font-medium text-gray-300 hover:text-white transition-colors group"
          >
            {item.name}
            <span class="absolute bottom-0 left-0 w-full h-px transform scale-x-0 transition-transform duration-300 bg-gradient-to-r from-primary-500 to-primary-300 group-hover:scale-x-100"></span>
          </a>
        ))}
      </div>

      <!-- Mobile Menu Button -->
      <button 
        id="mobileMenuBtn"
        class="lg:hidden flex flex-col justify-center items-center w-10 h-10 relative"
        style="z-index: 50;"
        aria-label="Menu"
      >
        <span class="w-6 h-0.5 bg-white mb-1.5 transform transition-all duration-300"></span>
        <span class="w-6 h-0.5 bg-white mb-1.5 transform transition-all duration-300"></span>
        <span class="w-6 h-0.5 bg-white transform transition-all duration-300"></span>
      </button>
    </div>
  </nav>

  <!-- Mobile Menu -->
  <div 
    id="mobileMenu"
    class="fixed inset-0 bg-dark-900/95 backdrop-blur-lg transform translate-x-full transition-transform duration-300 lg:hidden"
    style="z-index: 40;"
  >
    <div class="container mx-auto px-4 py-24">
      <div class="flex flex-col items-center space-y-8">
        {navItems.map(item => (
          <a 
            href={item.url}
            class="text-2xl font-medium text-gray-300 hover:text-white transition-colors mobile-nav-link"
          >
            {item.name}
          </a>
        ))}
      </div>
    </div>
  </div>
</header>

<style>
  .font-playfair {
    font-family: 'Playfair Display', serif;
  }

  /* Prevent body scroll when menu is open */
  :global(body.menu-open) {
    overflow: hidden !important;
    position: fixed;
    width: 100%;
    height: 100%;
    top: var(--scroll-position);
  }

  #mobileMenu {
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }
</style>

<script>
  function initNavigation() {
    const header = document.getElementById('header');
    const mobileMenu = document.getElementById('mobileMenu');
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const spans = mobileMenuBtn?.querySelectorAll('span');
    let isMenuOpen = false;
    let lastScroll = 0;

    function toggleMenu() {
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Store current scroll position
        document.documentElement.style.setProperty('--scroll-position', `-${window.scrollY}px`);
        mobileMenu?.classList.remove('translate-x-full');
        document.body.classList.add('menu-open');
        spans?.forEach((span, index) => {
          if (index === 0) span.classList.add('rotate-45', 'translate-y-2');
          if (index === 1) span.classList.add('opacity-0');
          if (index === 2) span.classList.add('-rotate-45', '-translate-y-2');
        });
      } else {
        mobileMenu?.classList.add('translate-x-full');
        document.body.classList.remove('menu-open');
        // Restore scroll position
        const scrollY = document.documentElement.style.getPropertyValue('--scroll-position');
        document.documentElement.style.removeProperty('--scroll-position');
        window.scrollTo(0, parseInt(scrollY || '0') * -1);
        spans?.forEach((span, index) => {
          if (index === 0) span.classList.remove('rotate-45', 'translate-y-2');
          if (index === 1) span.classList.remove('opacity-0');
          if (index === 2) span.classList.remove('-rotate-45', '-translate-y-2');
        });
      }
    }

    // Mobile menu toggle
    mobileMenuBtn?.addEventListener('click', toggleMenu);

    // Close menu when clicking a link
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (isMenuOpen) {
          toggleMenu();
        }
      });
    });

    // Header scroll behavior
    window.addEventListener('scroll', () => {
      const currentScroll = window.pageYOffset;
      
      if (currentScroll <= 0) {
        header?.classList.remove('bg-dark-900/95', 'backdrop-blur-lg', 'shadow-lg', '-translate-y-full');
      } else {
        header?.classList.add('bg-dark-900/95', 'backdrop-blur-lg', 'shadow-lg');
        
        if (currentScroll > lastScroll && currentScroll > 100) {
          header?.classList.add('-translate-y-full');
        } else {
          header?.classList.remove('-translate-y-full');
        }
      }
      
      lastScroll = currentScroll;
    });

    function resetMenu() {
      isMenuOpen = false;
      mobileMenu?.classList.add('translate-x-full');
      document.body.classList.remove('menu-open');
      document.documentElement.style.removeProperty('--scroll-position');
      spans?.forEach((span, index) => {
        if (index === 0) span.classList.remove('rotate-45', 'translate-y-2');
        if (index === 1) span.classList.remove('opacity-0');
        if (index === 2) span.classList.remove('-rotate-45', '-translate-y-2');
      });
    }

    // Reset on page navigation
    document.addEventListener('astro:after-swap', resetMenu);

    // Initial reset
    resetMenu();
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initNavigation);

  // Initialize on view transitions
  document.addEventListener('astro:page-load', initNavigation);
</script>